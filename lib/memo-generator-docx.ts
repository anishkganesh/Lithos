import { Document, Paragraph, TextRun, HeadingLevel, AlignmentType, Packer } from 'docx';
import { MemoData } from './memo-generator';

export async function generateMemoDocx(data: MemoData): Promise<Uint8Array> {
  // Create document sections
  const sections = [];

  // Title
  sections.push(
    new Paragraph({
      text: "INVESTOR MEMO",
      heading: HeadingLevel.TITLE,
      alignment: AlignmentType.CENTER,
      spacing: { after: 400 }
    })
  );

  // Date
  sections.push(
    new Paragraph({
      text: data.date,
      alignment: AlignmentType.CENTER,
      spacing: { after: 400 }
    })
  );

  // Project Details Section
  if (data.projectName || data.company) {
    sections.push(
      new Paragraph({
        text: "PROJECT DETAILS",
        heading: HeadingLevel.HEADING_1,
        spacing: { before: 400, after: 200 }
      })
    );

    if (data.projectName) {
      sections.push(
        new Paragraph({
          children: [
            new TextRun({ text: "Project: ", bold: true }),
            new TextRun(data.projectName)
          ],
          spacing: { after: 120 }
        })
      );
    }

    if (data.company) {
      sections.push(
        new Paragraph({
          children: [
            new TextRun({ text: "Company: ", bold: true }),
            new TextRun(data.company)
          ],
          spacing: { after: 120 }
        })
      );
    }

    if (data.commodity) {
      sections.push(
        new Paragraph({
          children: [
            new TextRun({ text: "Commodity: ", bold: true }),
            new TextRun(data.commodity)
          ],
          spacing: { after: 120 }
        })
      );
    }

    if (data.country) {
      sections.push(
        new Paragraph({
          children: [
            new TextRun({ text: "Country: ", bold: true }),
            new TextRun(data.country)
          ],
          spacing: { after: 120 }
        })
      );
    }

    if (data.npv !== undefined) {
      sections.push(
        new Paragraph({
          children: [
            new TextRun({ text: "NPV: ", bold: true }),
            new TextRun(`$${data.npv.toFixed(1)}M`)
          ],
          spacing: { after: 120 }
        })
      );
    }

    if (data.irr !== undefined) {
      sections.push(
        new Paragraph({
          children: [
            new TextRun({ text: "IRR: ", bold: true }),
            new TextRun(`${data.irr.toFixed(1)}%`)
          ],
          spacing: { after: 400 }
        })
      );
    }
  }

  // Analysis Section
  sections.push(
    new Paragraph({
      text: "ANALYSIS",
      heading: HeadingLevel.HEADING_1,
      spacing: { before: 400, after: 200 }
    })
  );

  // Split content into paragraphs
  const contentParagraphs = data.content.split('\n\n').filter(p => p.trim());
  for (const para of contentParagraphs) {
    sections.push(
      new Paragraph({
        text: para.trim(),
        spacing: { after: 240 },
        alignment: AlignmentType.JUSTIFIED
      })
    );
  }

  // Recommendations Section
  if (data.recommendations) {
    sections.push(
      new Paragraph({
        text: "RECOMMENDATIONS",
        heading: HeadingLevel.HEADING_1,
        spacing: { before: 400, after: 200 }
      })
    );

    sections.push(
      new Paragraph({
        text: data.recommendations,
        spacing: { after: 240 },
        alignment: AlignmentType.JUSTIFIED
      })
    );
  }

  // Footer
  sections.push(
    new Paragraph({
      text: "Generated by Lithos AI",
      alignment: AlignmentType.CENTER,
      spacing: { before: 600 },
      children: [
        new TextRun({
          text: "Generated by Lithos AI",
          color: "999999",
          size: 20
        })
      ]
    })
  );

  // Create the document
  const doc = new Document({
    sections: [{
      properties: {},
      children: sections
    }],
    creator: "Lithos AI",
    title: "Investor Memo",
    description: "Mining investment analysis memo"
  });

  // Generate the document buffer
  const buffer = await Packer.toBuffer(doc);
  return new Uint8Array(buffer);
}
