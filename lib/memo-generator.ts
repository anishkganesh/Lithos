import { PDFDocument, StandardFonts, rgb } from 'pdf-lib';

export interface MemoData {
  title: string;
  date: string;
  projectName?: string;
  company?: string;
  commodity?: string;
  country?: string;
  npv?: number;
  irr?: number;
  content: string;
  analysis?: string;
  recommendations?: string;
}

export async function generateMemoPDF(data: MemoData): Promise<Uint8Array> {
  // Create a new PDF document
  const pdfDoc = await PDFDocument.create();
  
  // Add a page
  const page = pdfDoc.addPage([612, 792]); // Letter size
  const { width, height } = page.getSize();
  
  // Load fonts
  const helveticaBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
  const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica);
  
  let yPosition = height - 50;
  
  // Title
  page.drawText('INVESTOR MEMO', {
    x: 50,
    y: yPosition,
    size: 24,
    font: helveticaBold,
    color: rgb(0, 0, 0),
  });
  
  yPosition -= 30;
  
  // Date
  page.drawText(data.date, {
    x: 50,
    y: yPosition,
    size: 12,
    font: helvetica,
    color: rgb(0.3, 0.3, 0.3),
  });
  
  yPosition -= 40;
  
  // Project details if available
  if (data.projectName) {
    page.drawText('PROJECT DETAILS', {
      x: 50,
      y: yPosition,
      size: 14,
      font: helveticaBold,
      color: rgb(0, 0, 0),
    });
    
    yPosition -= 20;
    
    const details = [
      data.projectName && `Project: ${data.projectName}`,
      data.company && `Company: ${data.company}`,
      data.commodity && `Commodity: ${data.commodity}`,
      data.country && `Country: ${data.country}`,
      data.npv !== undefined && `NPV: $${data.npv.toFixed(1)}M`,
      data.irr !== undefined && `IRR: ${data.irr.toFixed(1)}%`,
    ].filter(Boolean);
    
    for (const detail of details) {
      if (detail) {
        page.drawText(detail, {
          x: 50,
          y: yPosition,
          size: 11,
          font: helvetica,
          color: rgb(0.2, 0.2, 0.2),
        });
        yPosition -= 18;
      }
    }
    
    yPosition -= 20;
  }
  
  // Main content
  page.drawText('ANALYSIS', {
    x: 50,
    y: yPosition,
    size: 14,
    font: helveticaBold,
    color: rgb(0, 0, 0),
  });
  
  yPosition -= 20;
  
  // Break content into lines (simple word wrap)
  const maxWidth = width - 100;
  // Clean the content - remove newlines and extra spaces
  const cleanContent = data.content.replace(/\n/g, ' ').replace(/\s+/g, ' ').trim();
  const words = cleanContent.split(' ');
  const lines: string[] = [];
  let currentLine = '';
  
  for (const word of words) {
    const testLine = currentLine ? `${currentLine} ${word}` : word;
    const textWidth = helvetica.widthOfTextAtSize(testLine, 11);
    
    if (textWidth > maxWidth) {
      if (currentLine) {
        lines.push(currentLine);
        currentLine = word;
      } else {
        lines.push(word);
      }
    } else {
      currentLine = testLine;
    }
  }
  
  if (currentLine) {
    lines.push(currentLine);
  }
  
  // Draw wrapped text
  for (const line of lines) {
    if (yPosition < 100) {
      // Add new page if needed
      const newPage = pdfDoc.addPage([612, 792]);
      yPosition = height - 50;
      page.drawText(line, {
        x: 50,
        y: yPosition,
        size: 11,
        font: helvetica,
        color: rgb(0.2, 0.2, 0.2),
      });
    } else {
      page.drawText(line, {
        x: 50,
        y: yPosition,
        size: 11,
        font: helvetica,
        color: rgb(0.2, 0.2, 0.2),
      });
    }
    yPosition -= 16;
  }
  
  // Recommendations if available
  if (data.recommendations) {
    yPosition -= 20;
    
    page.drawText('RECOMMENDATIONS', {
      x: 50,
      y: yPosition,
      size: 14,
      font: helveticaBold,
      color: rgb(0, 0, 0),
    });
    
    yPosition -= 20;
    
    // Clean recommendations text
    const cleanRecs = data.recommendations.replace(/\n/g, ' ').replace(/\s+/g, ' ').trim();
    const recLines = [cleanRecs];
    for (const line of recLines) {
      if (yPosition < 50) break;
      page.drawText(line, {
        x: 50,
        y: yPosition,
        size: 11,
        font: helvetica,
        color: rgb(0.2, 0.2, 0.2),
      });
      yPosition -= 16;
    }
  }
  
  // Footer
  page.drawText('Generated by Lithos AI', {
    x: 50,
    y: 30,
    size: 10,
    font: helvetica,
    color: rgb(0.5, 0.5, 0.5),
  });
  
  // Serialize the PDF
  const pdfBytes = await pdfDoc.save();
  return pdfBytes;
}
